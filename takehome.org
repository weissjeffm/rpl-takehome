# -*- mode: org; -*-
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/readtheorg/css/htmlize.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/readtheorg/css/readtheorg.css"/>
#+HTML_HEAD: <style> pre.src { background: black; color: white; } #content { max-width: 1000px } </style>
#+HTML_HEAD: <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
#+HTML_HEAD: <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/lib/js/jquery.stickytableheaders.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/readtheorg/js/readtheorg.js"></script>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="styles.css"/>

#+TITLE: Take Home
#+AUTHOR: Jeff Weiss
#+BABEL: :cache yes
#+OPTIONS: toc:4 h:4
#+STARTUP: showeverything

* Clojure interpreter for stack-based DSL
** Description
*** Explanation of functionality
+ Variables are symbols prefixed with "!", e.g. !v
+ A stack function is defined with "defstackfn". The first argument is the input declaration
  which also provides variable names to the arguments. The stack always starts empty.
+ The implementation of a stackfn is a sequence of stack operations.
+ Using a constant as a stack operation pushes that value onto the stack
+ Using a variable as a stack operation pushes the value for that variable onto the stack.
+ A variable is assigned the top value of the stack by appending =+= to the variable name,
  e.g. =!v+=
+ A function is invoked with =invoke>=. =invoke>= takes as input the operation and the
  arity to use.
+ =<pop>= is a special operation which removes the top value of the stack.
+ =if>= tests if the top value of the stack is truthy to determine which branch to follow. The
  branches are separated with =else>=
*** Notes about your implementation
+ =defstackfn= should be a macro that produces a function invokable like any other
  function.
+ Should provide an informative error if there's an invalid stack operation or a variable is
  referenced that doesn't exist.
+ The example below contains all functionality you need to implement.
+ It should be possible to shadow vars (naming a new local the name of an existing
  variable).
