# -*- mode: org; -*-
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/readtheorg/css/htmlize.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/readtheorg/css/readtheorg.css"/>
#+HTML_HEAD: <style> pre.src { background: black; color: white; } #content { max-width: 1000px } </style>
#+HTML_HEAD: <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
#+HTML_HEAD: <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/lib/js/jquery.stickytableheaders.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/readtheorg/js/readtheorg.js"></script>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="styles.css"/>

#+TITLE: Take Home
#+AUTHOR: Jeff Weiss
#+BABEL: :cache yes
#+OPTIONS: toc:4 h:4
#+STARTUP: showeverything

* Clojure interpreter for stack-based DSL
** Problem statement
*** Explanation of functionality
+ Variables are symbols prefixed with "!", e.g. !v
+ A stack function is defined with "defstackfn". The first argument is the input declaration
  which also provides variable names to the arguments. The stack always starts empty.
+ The implementation of a stackfn is a sequence of stack operations.
+ Using a constant as a stack operation pushes that value onto the stack
+ Using a variable as a stack operation pushes the value for that variable onto the stack.
+ A variable is assigned the top value of the stack by appending =+= to the variable name,
  e.g. =!v+=
+ A function is invoked with =invoke>=. =invoke>= takes as input the operation and the
  arity to use.
+ =<pop>= is a special operation which removes the top value of the stack.
+ =if>= tests if the top value of the stack is truthy to determine which branch to follow. The
  branches are separated with =else>=
*** Notes about your implementation
+ =defstackfn= should be a macro that produces a function invokable like any other
  function.
+ Should provide an informative error if there's an invalid stack operation or a variable is
  referenced that doesn't exist.
+ The example below contains all functionality you need to implement.
+ It should be possible to shadow vars (naming a new local the name of an existing
  variable).
*** Example invocation
#+begin_src clojure
(defstackfn f
  [!a !b !c] ; example uses input: 1 2 4. Stack starts empty.
  !a ; 1
  !b ; 1 2
  (invoke> + 2) ; 3
  !v1+ ; 3
  !c ; 3 4
  !c ; 3 4 4
  <pop> ; 3 4
  2 ; 3 4 2
  (invoke> * 2) ; 3 8
  !v2+ ; 3 8
  (invoke> = 2) ; false
  (if> ; stack empty
    !v1
    !v2
    (invoke> - 2)
    else>
    "false!!" ;; "false!!"
    (invoke> println 1) ; nil
    <pop> ; stack empty
    !v1 ; 3
    !v2 ; 3 8
    (invoke> * 2) ; 24
    )
  )
;; (f 1 2 4) prints "false!!" and returns 24
#+end_src
** Design
*** Basic approach
We'll compile the various statements into forms. Each successive form
will have the state threaded through it with the =->= macro, and its
result will be a new state. We'll wrap a function definition around
that.
*** Variable shadowing
For now there is no variable scoping, and therefore setting a variable
twice will result in clobbering the previous value. Adding scoping
within an =if>= block would be pretty trivial, as the compiled form
still has access to the original variable values, and could return
those as part of the resulting state instead of whatever was created
in the =if>= block. As to which is the better design, it's hard to say
given the extreme simplicity of the language. Scoping is not strictly
needed - the stack provides a similar ability to shadow values (by
placing a new value on ToS and later popping it off).
*** Loops
It should be fairly straightforward to compile a =loop= word into a
clojure =loop=. The part that doesn't easily fit seems to be
=break=. In a clojure =loop=, there is no explicit =break=. Instead
the default is to stop whenever the body terminates without a
=recur=. I think we can simulate =break= as follows:

#+begin_src clojure
(loop [state state
       continue? true] ;; this boolean added by compiler, not exposed to stack lang
  (when (and continue?
             (-> state :stack seq) ;; should really throw stack underflow if this is false
             (-> state :stack first))
    ;; compiled loop body here
    ;; a 'break' would be expanded into
    (recur state false)
    ;; a continue would be expanded into
    (recur state true)
    ;; and the end of the loop would add to repeat the loop by default,
    ;; only exiting when the top stack item is falsey.
    (recur state true)))
#+end_src

The problem with the above is that you can't have the last recur all
the time, if there's a recur already somewhere nested in the
body. Then that inner recur is no longer in tail position and the
clojure compiler doesn't allow it.

There are several possible approaches to deal with this problem:
**** Rewrite the body so that each branch ends with its own recur
#+begin_src
(loop> x (if> break else> 2) 3)
;; equivalent to
(loop> x (if> break else> 2 3))
;; because the break guarantees the 3 can only be reached in the false branch

rewrite an if inside a loop that contains break to move everything after the form
into the else branch. Then place a =(recur true)= at the end of the else branch to
continue.
#+end_src
#+begin_src clojure
x
(if ..
    state ;; break
    (-> state ((push 2) (push 3) (recur true))))
#+end_src

it gets more complex if there are multiple ifs:

#+begin_src
(loop x (if> 6 break else> 2) 5 (if 7 break else> 4) 11)
#+end_src

#+begin_src clojure
x 
(if ..
 (-> (push 6) (recur false))
 (-> (5 (if .. (-> 7 (recur false)) (-> 4 11 (recur true))) 
#+end_src

we could now just leave out the (recur false)s:

#+begin_src clojure
x 
(if ..
 (-> (push 6))
 (-> (5 (if .. (-> 7) (-> 4 11 (recur true)))
#+end_src

Should we rewrite the stackish and then compile?
#+begin_src 
(loop x (if> 6 break else> 2 5 (if> 7 break> else> 4 11)))
#+end_src
*** Anonymous stack functions
The basic idea here is to compile something like
#+begin_src 
(fn> 3 (invoke> + 2))
#+end_src

into
#+begin_src clojure
(fn [state]
  (-> state
      ;; expansion of the body
      ))
#+end_src

Then we'd have the ability to place function objects on the stack, but
still lack the ability to call them. Then we'd need a word =call>=
that invokes the function on the ToS.

#+begin_src clojure
(let [f (-> state :stack first)] ;; handle popping and stackunderflow here
    (f state))
#+end_src
*** Multi-arity stack functions
I am not sure what this means, since a "stack function" is a function
of one argument: the stack. Perhaps this means you can implement the
word =call>= to take additional arguments beyond the stack. This seems
kind of silly, since you could just push the items onto the stack and
then call the function. Maybe instead of taking arguments directly,
the =call>= form will just take an argument count, which represents
how many items to take from the stack and apply to the function. Even
better would be to take the argument count from the stack, but this
seems at odds with the design of =invoke>=.

** Implementation
*** Project file
#+begin_src clojure :tangle project.clj
(defproject redplanetlabs "0.1.0-SNAPSHOT"
  :description "FIXME: write description"
  :url "http://example.com/FIXME"
  :license {:name "EPL-2.0 OR GPL-2.0-or-later WITH Classpath-exception-2.0"
            :url "https://www.eclipse.org/legal/epl-2.0/"}
  :dependencies [[org.clojure/clojure "1.10.0"]]
  :repl-options {:init-ns redplanetlabs.core})
#+end_src
*** Data structures
Our interpreter will need to keep track of two things:
+ the stack
+ variables

The stack is easily implemented as a clojure list, and the variables
can be a map with symbol keys. The symbols will be the names of the
variables (with decorations =!= and =+= stripped).

#+begin_src clojure :tangle src/redplanetlabs/core.clj :results none
(ns redplanetlabs.core)

(defrecord State [stack vars])

(defn new-state []
  (State. (list) {}))
#+end_src

*** Compiler functions and runtime functions
There are functions that create clojure code from =defstackfn= items
and functions that do the work at runtime. The runtime functions are
sometimes trivial but make compiled code more readable. 
#+begin_src clojure :tangle src/redplanetlabs/core.clj :results none
(defn parse-var-reference
  "Returns a pair or nil. In the pair, the first item is a symbol for
   the variable being referred to (either a get '!v' or set '!v+'
   operation). The second item is a boolean, true for a 'set'
   operation and false for a 'get' operation. Returns nil if it's not
   a proper reference.

   eg !v => [v false], !v+ => [v true], v => nil"
  [sym]
  (let [[_ var set?] (re-find #"^!([^+]+)(\+?)$" (name sym))
        set? (boolean (seq set?))]
    (and var [(symbol var) set?])))

(defn push
  "Push val onto the stack, return the state"
  [state val]
  (update state :stack conj val))

(defn compile-constant
  "Pushes the constant onto the stack"
  [constant]
  `(push ~constant))

(defn throw-error
  "Throws an exception with the format args applied to the given
   format-string as the message"
  [fmt-str & fmt-args]
  (throw (Exception. (apply format fmt-str fmt-args))))

(defn var-lookup
  "Returns the value of a variable or throws exception if it doesn't
  exist"
  [state v]
  (-> state
      :vars
      (get v)
      (or (throw-error "Variable does not exist: %s" (name v)))))

(defn set-var
  "Sets the variable var with the value currently on top of
  stack (tos). Does not change the stack."
  [{:keys [stack] :as state} var]
  (if-let [tos (first stack)]
    (update state :vars assoc var tos)
    (throw-error "Stack underflow setting variable: %s" (name var))))

(defn get-var
  "Gets the variable var and pushes it onto the stack."
  [{:keys [vars] :as state} var]
  (->> var
       (var-lookup state)
       (update state :stack conj)))

(defn pop
  [{:keys [stack] :as state}]
  (if (seq stack)
    (update state :stack rest)
    (throw-error "Stack underflow")))

(defn compile-symbol
  "Emits code that handles symbols (variable get/set, pop)"
  [sym]
  (case sym
    <pop> `(pop)
    break> `(identity) ;; in clojure we break loops by default and logic has
    ;; already been shifted around so breaks aren't needed
    
    continue> '(recur)
    (if-let [var (parse-var-reference sym)]
      (let [[var set?] var]
        `(~(if set? `set-var `get-var) (quote ~var)))
      (throw-error "Unknown variable or symbol: %s" (name sym)))))

(defn invoke
  "Calls f with args taken from the top of the stack. Arity sets the
  number of args to take from the stack. Throws an exception if there
  aren't enough args on the stack."
  [{:keys [stack] :as state} f arity]
  (let [[args stack] (split-at arity stack)]
    (when (not= (count args) arity)
      (throw-error "Stack underflow calling %s" f))
    (->> args
         reverse ;; make the ToS the last argument to the function, so
         ;; that we can write '3 2 -' and get 1 instead of -1
         (apply f)
         (conj stack)
         (assoc state :stack))))

(defn compile-invoke
  "Emits code for invoke>"
  [[f arity]]
  (when (or (not (integer? arity)) (neg? arity))
    (throw-error "Invalid arity: %s" arity))
  (when-not (symbol? f)
    (throw-error "Invalid invocation, function must be a symbol"
                 (str f)))
  `(invoke ~f ~arity))

(defmacro threaded-if
  "Expands from an expression that fits into the threading macro ->
   (in other words, takes the state as the first arg), to a let/if
   that returns the new state"
  [state if-clause else-clause]
  `(let [tos# (-> ~state :stack first)
         newstate# (update ~state :stack rest)]
     (if tos#
       (-> newstate# ~@if-clause)
       (-> newstate# ~@else-clause))))

(declare compile-item)

(defn split-if
  [items]
  (let [[if-clause [_ & else-clause]] (split-with #(not= % else-sym) items)]
    [if-clause else-clause]))

(defn check-break-if-clause
  "Checks if the clause has break/continue. Returns true if it is
  last, false if not present, and throws an exception if present but
  not last"
  [clause]
  (let [kws #{'break> 'continue>}]
    (if (some kws clause)
      (if (kws (last clause))
        true
        (throw-error "Break and continue must be last in clause"))
      false)))

(def if-sym 'if>)
(def else-sym 'else>)

(defn shift-loop-breaks
  "If a loop body contains an if that contains a 'break' (also
   includes 'continue') in one branch, move the rest of the body
   following the if into the other branch, then recurse into that
   joined branch. Throws exception if break/continue isn't in tail
   position"
  [body]
  (let [[up-to-if [[_ & the-if] & remaining]] (split-with (fn [x]
                                                    (not (and (seq? x)
                                                              (-> x first (= if-sym)))))
                                                  body)]
    (if the-if
      (let [[if-clause else-clause :as clauses] (split-if the-if)
            [break-cont-if? break-cont-else?] (map check-break-if-clause clauses)]
        (if (not= break-cont-if? break-cont-else?)
          ;; do the shift
          (list* (conj (vec up-to-if)
                       (if break-cont-if?
                         (concat [if-sym] if-clause [else-sym]
                                 (shift-loop-breaks (concat else-clause remaining)) ['continue>])
                         (concat [if-sym] (shift-loop-breaks (concat if-clause remaining)) ['continue>]
                                 [else-sym] else-clause))))
          (if break-cont-if?
            ;; break in both positions, what now?
            body ;; FIXME:
            ;; neither has a break
            body
            )))
      body)))

(defn compile-if
  "Emits code for if> else>"
  [items]
  (let [[if-clause else-clause] (split-if items)
        compiled-if (map compile-item if-clause)
        compiled-else (map compile-item else-clause)]
    `(threaded-if ~compiled-if ~compiled-else)))


(defmacro threaded-loop
  "Expands from an expression that fits into the threading macro ->
   (in other words, takes the state as the first arg), to a let/loop
   that returns the new state"
  [state body]
  `(loop [state# ~state]
     (if (-> ~state :stack seq)
       (let [tos# (-> state# :stack first)
             newstate# (update state# :stack rest)]
         ;; add a default recur to the end of the body
         (if tos#
           ;;(-> newstate# ~@(conj (vec body) `(recur true)))
           
           ;;TODO: the above ends up not being in tail position if
           ;; there's a recur elsewhere. May need to do something
           ;; like walk the body and insert recur at all the leaves
           ;; that don't have it already. What I can't do is
           ;; (recur (if foo 2 (recur false)) true)
           ;; must instead be
           ;; (if foo (do 2 (recur true)) (recur false)) another
           ;; possibly much simpler approach would be to expand into
           ;; 'while' but then there's no 'break' .  Maybe an even
           ;; better approach is to only use one recur at the end as
           ;; above, but let the body set the boolean - the body
           ;; could return a pair [state, continue?]. But that
           ;; alters the contract of state -> state that we use
           ;; everywhere else. we could make the data part of the
           ;; state. Then the clojure compiler would no longer be
           ;; able to check nothing follows break/continue and we'd
           ;; have to do it ourselves.  If we have to walk the tree
           ;; either way, might lean towards inserting recurs.
           (-> newstate# ~@body)
           newstate#))
       (throw-error "Stack underflow"))))


(defn compile-loop
  "Compiles a loop, which checks the ToS for truthy to
  continue. Supports 'continue' and 'break'"
  [body]
  `(threaded-loop ~(map compile-item (shift-loop-breaks body))))

(defn compile-list
  "Emits code for a list item (if or invoke)"
  [[function & args]]
  (case function
    if> (compile-if args)
    invoke> (compile-invoke args)
    loop> (compile-loop args)
    (throw-error "Unknown function: %s" function)))

(defn compile-item
  "Returns a code snippet that executes the given item inside a
  defstackfn. the form is always one that fits into the -> macro. In
  other words, the first argument to whatever function is called is
  left out. It will be filled in inside the -> macro with a form that
  returns the state that this item needs."
  [item]
  (cond
    (sequential? item) (compile-list item)
    (symbol? item) (compile-symbol item)
    true (compile-constant item)))

(defn assign-initial-vars
  "Assigns a value to the initial variables specified in the first
  argument to defstackfn. If there are more variables specified than
  arguments, throw an error. If there are more arguments than
  variables, discard the extra arguments."
  [state vars values]
  (when (> (count vars) (count values))
    (throw-error "Not enought arguments to assign all variables"))
  (let [;; discard the leading ! from var names
        vars (map (comp first parse-var-reference) vars)
        ;; match up var names to args (discarding anything leftover)
        kvs (map vector vars values)]
    (update state :vars merge (into {} kvs))))

(defmacro defstackfn
  "Compile a function with the name name-sym, and a list of variable
  names to assign at runtime to the arguments passed to the
  function. The function accepts a variable number of args."
  [name-sym initial-vars & program]
  `(defn ~name-sym [& args#]
     (-> (new-state)
         (assign-initial-vars (quote ~initial-vars) args#)
         ~@(map compile-item program)
         :stack)))
#+end_src

*** Tests
#+begin_src clojure :tangle test/redplanetlabs/core_test.clj :results none
(ns redplanetlabs.core-test
  (:require [clojure.test :refer :all]
            [redplanetlabs.core :as sut]))

(sut/defstackfn example [!a !b !c] ; example uses input: 1 2 4. Stack starts empty.
  !a ; 1
  !b ; 1 2
  (invoke> + 2) ; 3
  !v1+ ; 3
  !c ; 3 4
  !c ; 3 4 4
  <pop> ; 3 4
  2 ; 3 4 2
  (invoke> * 2) ; 3 8
  !v2+ ; 3 8
  (invoke> = 2) ; false
  (if> ; stack empty
      !v1
    !v2
    (invoke> - 2)
    else>
    "false!!" ;; "false!!"
    (invoke> println 1) ; nil
    <pop> ; stack empty
    !v1 ; 3
    !v2 ; 3 8
    (invoke> * 2) ; 24
    )
  )

(sut/defstackfn nested-if [!y]
  !y !y
  (invoke> pos? 1)
  (if> !y
    (invoke> even? 1)
    (if> 3
      (invoke> + 2)
      else>
      11
      (invoke> * 2))
    else> -99))

(sut/defstackfn shadow [!x !y] !x !y !x+ !x)

(sut/defstackfn loop []
  1 true
  (loop> !x+ !x ;; hacky dup
         (invoke> + 2)
         !x+ !x 
         10000 (invoke> < 2)))

(sut/defstackfn fib [!start !max]
  !start !start true
  (loop> !a+ <pop> !b+ <pop> !a !a !b
         (invoke> + 2) ;; 1 2
         !b !b 
         !max (invoke> < 2)))

(deftest example-test
  (is (= (example 1 2 4) '(24))))

(deftest nested-if-test
  (are [y exp] (= (nested-if y) exp)
    4 '(7)
    5 '(55)
    -4  '(-99 -4)))

(deftest shadow-test
  (is (= (shadow 1 2) '(2 2 1))))

(deftest loop-test
  (is (= (fib 1 10) '(13 21 8 5 3 2 1 1))))
#+end_src

